// Prisma schema for INSTAUP SNS Growth Platform
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User management
enum Role {
  USER
  ADMIN
}

model User {
  id              String    @id @default(cuid())
  email           String    @unique
  password        String
  nickname        String?
  balance         Float     @default(0) // 잔액
  referralCode    String?   @unique // 나의 추천인 코드
  referredById    String?   // 나를 추천한 사람의 ID
  referredBy      User?     @relation("UserReferrals", fields: [referredById], references: [id], onDelete: NoAction, onUpdate: NoAction)
  referrals       User[]    @relation("UserReferrals") // 내가 추천한 사람들
  isAdmin         Boolean   @default(false)
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  totalSpent      Float     @default(0) // 총 사용 금액
  lastActivityAt  DateTime? @updatedAt // 마지막 활동 시간 자동 업데이트

  orders    Order[]
  payments  Payment[] // 충전 내역
  topUps    TopUp[]   // 추가된 relation

  // Referral relations
  referrerReferrals Referral[] @relation("ReferrerUser") // 내가 추천한 사람들
  referredReferrals Referral[] @relation("ReferredUser") // 나를 추천한 기록들
  referralStats     ReferralStats[] // 추천 통계

  // sessions Session[] // If using database sessions for auth
}

// Admin users
model Admin {
  id        String   @id @default(cuid())
  email     String   @unique
  password  String
  name      String
  role      AdminRole @default(ADMIN)
  isActive  Boolean  @default(true)
  lastLogin DateTime?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  adminLogs AdminLog[] // Added relation to AdminLog

  @@map("admins")
}

enum AdminRole {
  SUPER_ADMIN
  ADMIN
  MANAGER
}

// Service configuration
model Service {
  id            String    @id @default(cuid())
  name          String    // e.g., "Instagram 한국인 좋아요"
  platform      String    // e.g., "instagram", "youtube"
  category      String    // e.g., "likes", "followers", "views"
  price         Float     // Price per unit (e.g., per 1 like, per 1 follower)
  minQuantity   Int       @default(1)
  maxQuantity   Int       @default(10000)
  description   String?
  isActive      Boolean   @default(true)
  apiProviderId String?   // For external API integration, if any
  details       Json?     // Extra details like speed (e.g. "100-500/day"), refill policy (e.g. "30d Refill"), quality (e.g. "Real High Quality")
  sortOrder     Int?      // For ordering services in lists

  orders Order[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([platform])
  @@index([category])
  @@index([isActive])
}

// Orders
model Order {
  id          String      @id @default(cuid())
  shortId     String?     @unique // Shorter, user-friendly ID, e.g. ORD-XXXXXX - can be generated by a hook or service

  userId      String
  user        User        @relation(fields: [userId], references: [id], onDelete: Cascade) // If user is deleted, their orders are also deleted. Consider implications.

  serviceId   String
  service     Service     @relation(fields: [serviceId], references: [id])

  targetUrl   String      // e.g., Instagram post URL, YouTube video URL
  quantity    Int         // Requested quantity

  pricePerUnit Float      // Price per unit at the time of order (copied from Service.price)
  baseAmount   Float      // quantity * pricePerUnit
  discountAmount Float    @default(0) // Amount of discount applied
  charge      Float       // Actual amount charged to user (baseAmount - discountAmount)

  status      OrderStatus @default(PENDING)
  progress    Int?        @default(0) // e.g., 0-100 for PROCESSING status

  startCount  Int?        // Count before service starts (e.g., initial likes on a post)
  currentCount Int?       // Current count during processing (if tracked from provider)
  remains     Int?        // How many are left to deliver (quantity - delivered)

  logs        Json?       // JSON array of status changes or important events: [{ status: "PROCESSING", timestamp: "...", actor: "system" }]
  apiOrderId  String?     // Order ID from external API provider, if used
  apiError    String?     // Error message from external API provider

  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  processedAt DateTime?   // Timestamp when an admin or system starts active processing (moves from PENDING)
  completedAt DateTime?   // Timestamp when the order reached COMPLETED status

  notes       String?     // Internal notes by admin or system regarding this order

  refillDetails Json?     // Info about refills: { requestedAt: "", count: 0, lastRefillAt: "" }

  // Relations
  referralCommissions ReferralCommission[] // 이 주문으로 생성된 커미션들

  @@index([userId, createdAt])
  @@index([serviceId])
  @@index([status])
  @@index([targetUrl])
}

enum OrderStatus {
  PENDING // 대기
  PROCESSING // 진행중
  COMPLETED // 완료
  FAILED // 실패
  CANCELED // 취소 (사용자 또는 관리자)
  REFUNDED // 환불됨 (결제가 있었던 경우)
  REFILL_REQUESTED // 리필 요청
  REFILLING // 리필 진행중
  PARTIAL // 부분 완료 (일부 수량만 성공)
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  CANCELED
}

model Payment {
  id           String        @id @default(cuid()) // Primary key for the payment record
  userId       String
  user         User          @relation(fields: [userId], references: [id], onDelete: Cascade)

  amount       Float         // Amount of the payment (e.g. 10000 for a 10,000 KRW recharge)
  method       String        // Payment method used, e.g., "CARD", "KAKAOPAY", "TOSSPAY", "BANK_TRANSFER"
  status       PaymentStatus @default(PENDING) // Status of the payment transaction itself

  orderName    String?       // Name of the order for payment gateway (e.g., "INSTAUP 포인트 충전")
  orderId      String        @unique // Unique order ID for this payment transaction (can be generated: method_timestamp_userId)

  gatewayId    String?       // Transaction ID from the payment gateway (e.g., Toss paymentKey, Kakao tid)
  gatewayData  Json?         // Full response or relevant data from payment gateway

  paidAt       DateTime?     // Timestamp when payment was successfully completed
  failReason   String?       // Reason for payment failure, if any

  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt

  @@index([userId, createdAt])
  @@index([status])
  @@index([method])
}

// Enhanced Referral system (SNS Shop style)
model Referral {
  id              String          @id @default(cuid())
  referrerId      String
  referredId      String
  level           Int             @default(1) // 1=직접, 2=2단계, 3=3단계
  status          ReferralStatus  @default(PENDING)

  // Commission structure
  signupReward    Int             @default(10000) // 가입 보상 (KRW)
  firstOrderBonus Int             @default(15000) // 첫 주문 보너스 (KRW)
  commissionRate  Float           @default(0.05) // 5% 커미션율

  // Tracking
  totalCommission Int             @default(0) // 누적 커미션
  totalOrders     Int             @default(0) // 피추천인 주문 수
  lastActivity    DateTime?

  // Status tracking
  isSignupRewarded    Boolean     @default(false)
  isFirstOrderRewarded Boolean    @default(false)
  signupRewardedAt    DateTime?
  firstOrderRewardedAt DateTime?

  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt

  // Relations
  referrer User @relation("ReferrerUser", fields: [referrerId], references: [id])
  referred User @relation("ReferredUser", fields: [referredId], references: [id])

  // Commission records
  commissions ReferralCommission[]

  @@unique([referrerId, referredId])
  @@map("referrals")
}

enum ReferralStatus {
  PENDING       // 가입했지만 아직 활동 없음
  ACTIVE        // 첫 주문 완료, 활성 상태
  INACTIVE      // 30일 이상 비활성
  BLOCKED       // 부정 사용으로 차단
}

// 커미션 기록 테이블
model ReferralCommission {
  id          String              @id @default(cuid())
  referralId  String
  orderId     String              // 어떤 주문에서 발생한 커미션인지
  amount      Int                 // 커미션 금액
  rate        Float               // 적용된 커미션율
  type        CommissionType
  status      CommissionStatus    @default(PENDING)
  paidAt      DateTime?
  createdAt   DateTime            @default(now())

  // Relations
  referral Referral @relation(fields: [referralId], references: [id])
  order    Order    @relation(fields: [orderId], references: [id])

  @@map("referral_commissions")
}

enum CommissionType {
  SIGNUP_BONUS      // 가입 보너스
  FIRST_ORDER_BONUS // 첫 주문 보너스
  ORDER_COMMISSION  // 주문 커미션
  LEVEL2_COMMISSION // 2단계 커미션
  LEVEL3_COMMISSION // 3단계 커미션
}

enum CommissionStatus {
  PENDING   // 지급 대기
  PAID      // 지급 완료
  CANCELLED // 취소됨
  EXPIRED   // 만료됨
}

// 추천인 통계 (캐시 테이블)
model ReferralStats {
  id                  String   @id @default(cuid())
  userId              String   @unique

  // 직접 추천
  directReferrals     Int      @default(0)
  activeReferrals     Int      @default(0)

  // 다단계 추천
  level2Referrals     Int      @default(0)
  level3Referrals     Int      @default(0)

  // 수익 통계
  totalCommission     Int      @default(0)
  thisMonthCommission Int      @default(0)
  pendingCommission   Int      @default(0)

  // 추가 통계
  totalOrders         Int      @default(0) // 추천으로 발생한 총 주문 수
  conversionRate      Float    @default(0.0) // 전환율

  updatedAt           DateTime @updatedAt

  // Relations
  user User @relation(fields: [userId], references: [id])

  @@map("referral_stats")
}

// System configuration
model SystemConfig {
  id    String @id @default(cuid())
  key   String @unique
  value Json
  updatedAt DateTime @updatedAt

  @@map("system_config")
}

// Analytics and logs
model UserActivity {
  id        String   @id @default(cuid())
  userId    String?
  action    String
  data      Json?
  ipAddress String?
  userAgent String?
  createdAt DateTime @default(now())

  @@map("user_activities")
}

model SystemLog {
  id        String   @id @default(cuid())
  level     LogLevel
  message   String
  data      Json?
  source    String?
  createdAt DateTime @default(now())

  @@map("system_logs")
}

enum LogLevel {
  ERROR
  WARN
  INFO
  DEBUG
}

enum TopUpStatus {
  PENDING
  SUCCESS
  FAILED
}

model TopUp {
  id        String       @id @default(cuid())
  userId    String
  amount    Int
  status    TopUpStatus @default(PENDING)
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id])

  @@map("topups")
}

enum UserLevel {
  BASIC
  BRONZE
  SILVER
  GOLD
  PLATINUM
  VIP
}

model AdminLog {
  id         String   @id @default(cuid())
  adminId    String
  admin      Admin    @relation(fields: [adminId], references: [id])
  action     String   // e.g., "SERVICE_CREATE", "ORDER_STATUS_UPDATE", "USER_BALANCE_ADJUST"
  targetType String?  // e.g., "Service", "Order", "User"
  targetId   String?  // ID of the entity affected
  details    Json?    // Additional details about the action
  createdAt  DateTime @default(now())

  @@map("admin_logs")
}
